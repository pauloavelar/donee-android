import groovy.swing.SwingBuilder

apply plugin: 'com.android.application'

android {
    signingConfigs {
        release {
            // Declare this variable in your gradle.properties file
            storeFile file(KEY_STORE_PATH)
            keyAlias 'play-store'
            storePassword ""
            keyPassword ""
        }
    }
    compileSdkVersion 25
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "me.avelar.donee"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 5
        versionName "1.3.0"
    }
    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled false // minifying is causing all sorts of trouble, disabled for now
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    flavorDimensions "dataSource"
    productFlavors {
        demo {
            dimension "dataSource"
            applicationIdSuffix ".demo"
        }
        full {
            dimension "dataSource"
        }
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:cardview-v7:25.3.1'
    compile 'com.google.code.gson:gson:2.7'
    compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.google.android.gms:play-services-location:10.2.6'
}

// Task to interactively get the key store passwords instead of putting in clear text in a file
// Solution adapted from: timroes.de/2014/01/19/using-password-prompts-with-gradle-build-files/
task askForPasswords << {
    def storePass = ''
    def keyPass = ''
    if(System.console() == null) {
        new SwingBuilder().edt {
            dialog(modal: true, title: 'Enter password', alwaysOnTop: true, resizable: false,
                   locationRelativeTo: null, pack: true, show: true) {
                vbox { // Put everything below each other
                    label(text: "Key store passphrase:")
                    def input1 = passwordField()
                    label(text: "Key passphrase:")
                    def input2 = passwordField()
                    button(defaultButton: true, text: 'OK', actionPerformed: {
                        storePass = input1.password;
                        keyPass = input2.password;
                        dispose();
                    })
                }
            }
        }
    } else {
        storePass = System.console().readPassword("\nKey store passphrase: ")
        keyPass = System.console().readPassword("\nKey passphrase: ")
    }

    android.signingConfigs.release.storePassword = new String(storePass)
    android.signingConfigs.release.keyPassword = new String(keyPass)
}

tasks.whenTaskAdded { theTask ->
    if (theTask.name.contains("Release")) { // demoRelease, fullRelease
        theTask.dependsOn "askForPasswords"
    }
}